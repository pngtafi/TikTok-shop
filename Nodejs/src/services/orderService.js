import db from '../models/index.js'
import ExcelJS from 'exceljs'
const Order = db.Order

export const createOrderService = async (data) => {
  try {
    const {
      name,
      email,
      phone,
      address,
      product_name,
      color,
      size,
      quantity,
      price,
      eventId,
      note,
    } = data

    console.log('üì¶ createOrderService nh·∫≠n:', {
      name,
      email,
      phone,
      address,
      product_name,
      color,
      size,
      quantity,
      price,
      eventId,
      note,
    })

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (
      !name ||
      !phone ||
      !address ||
      !product_name ||
      !color ||
      !size ||
      !quantity ||
      !price
    ) {
      return { errCode: 2, message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' }
    }

    // T·∫°o b·∫£n ghi ƒë∆°n h√†ng m·ªõi
    const newOrder = await Order.create({
      name,
      email: email || '',
      phone,
      address,
      product_name,
      color,
      size,
      quantity,
      price,
      eventId,
      note: data.note || '',
    })
    return { errCode: 0, message: 'T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng', data: newOrder }
  } catch (err) {
    console.error('üî• L·ªói createOrderService:', err)
    return { errCode: 1, message: 'L·ªói khi t·∫°o ƒë∆°n h√†ng', error: err.message }
  }
}

export const exportOrdersService = async (query) => {
  try {
    const { startDate, endDate } = query
    // X√¢y d·ª±ng ƒëi·ªÅu ki·ªán l·ªçc theo ng√†y n·∫øu c√≥
    const where = {}
    if (startDate && endDate) {
      where.createdAt = {
        [Op.between]: [new Date(startDate), new Date(endDate)],
      }
    }

    // Truy v·∫•n t·∫•t c·∫£ ƒë∆°n h√†ng t·ª´ b·∫£ng orders v·ªõi c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
    const orders = await Order.findAll({
      attributes: [
        'name',
        'email',
        'phone',
        'address',
        'note',
        'product_name',
        'color',
        'size',
        'quantity',
        'price',
        'createdAt',
      ],
      where,
      raw: true,
    })

    // T·∫°o workbook m·ªõi v√† worksheet "Orders"
    const workbook = new ExcelJS.Workbook()
    const worksheet = workbook.addWorksheet('Orders')

    // ƒê·ªãnh nghƒ©a c√°c c·ªôt v√† ti√™u ƒë·ªÅ cho file Excel
    worksheet.columns = [
      { header: 'Name', key: 'name', width: 20 },
      { header: 'Email', key: 'email', width: 25 },
      { header: 'Phone', key: 'phone', width: 15 },
      { header: 'Address', key: 'address', width: 30 },
      { header: 'Note', key: 'note', width: 30 },
      { header: 'Product', key: 'product_name', width: 25 },
      { header: 'Color', key: 'color', width: 15 },
      { header: 'Size', key: 'size', width: 10 },
      { header: 'Quantity', key: 'quantity', width: 10 },
      { header: 'Price', key: 'price', width: 15 },
      { header: 'Created At', key: 'createdAt', width: 20 },
    ]

    // Th√™m d·ªØ li·ªáu ƒë∆°n h√†ng v√†o worksheet
    worksheet.addRows(orders)

    // Xu·∫•t workbook ra buffer v√† tr·∫£ v·ªÅ
    const buffer = await workbook.xlsx.writeBuffer()
    return buffer
  } catch (error) {
    console.error('Error exporting orders:', error)
    throw error // ƒë·∫©y l·ªói ra ƒë·ªÉ x·ª≠ l√Ω ·ªü t·∫ßng tr√™n (n·∫øu c·∫ßn)
  }
}
